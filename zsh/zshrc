# ╭------------------------------------------╮
# |                                          |
# | ███████╗███████╗██╗  ██╗██████╗  ██████╗ |
# | ╚══███╔╝██╔════╝██║  ██║██╔══██╗██╔════╝ |
# |   ███╔╝ ███████╗███████║██████╔╝██║      |
# |  ███╔╝  ╚════██║██╔══██║██╔══██╗██║      |
# | ███████╗███████║██║  ██║██║  ██║╚██████╗ |
# | ╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ |
# ╰------------------------------------------╯
#
# UNCOMMENT TO BENCHMARK
# BENCHMARK=1 && zmodload zsh/zprof
#

source_if_exists() {
    if [[ -f $1 ]]; then
        source $1;
    fi
}

path_if_exists() {
    if [[ -d $1 ]]; then
        export PATH="$1:$PATH"
    fi
}

# Path stuff
export TERM="xterm-256color"

path_if_exists ~/.bin

path_if_exists /usr/local/go/bin

path_if_exists ~/go/bin

path_if_exists ~/.local/bin

path_if_exists ~/.cargo/bin

path_if_exists /usr/local/sbin/

# Add all the potential homebrew paths
path_if_exists /opt/homebrew/bin
path_if_exists /opt/homebrew/sbin
path_if_exists ~/homebrew/bin
path_if_exists ~/homebrew/sbin

local MAIN_EDITOR="vim"
# Check if parent process is Cursor
if [[ "$(ps -o comm= -p $PPID)" == *"Cursor Helper"* ]]; then
    MAIN_EDITOR="cursor --wait"
elif [[ $(hash nvim 2>/dev/null) != 0 ]];then
    MAIN_EDITOR="nvim"
fi

if [[ -d /usr/share/zsh/vendor-completions ]]; then
    fpath=(/usr/share/zsh/vendor-completions $fpath)
    autoload -Uz compinit && compinit -i
fi

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR="$MAIN_EDITOR"
else
    export EDITOR="$MAIN_EDITOR"
fi

source_if_exists ~/.aliases
source_if_exists ~/.aliases-local

# ================================================================
# Plugins
# ================================================================
# load zinit if it doesn't exist
if [[ ! -d ~/.local/share/zinit/zinit.git ]];then
    mkdir -p ~/.local/share/zinit
    git clone https://github.com/zdharma-continuum/zinit.git ~/.local/share/zinit/zinit.git
fi
source ~/.local/share/zinit/zinit.git/zinit.zsh
# Async for zsh, used by pure
zinit ice wait"0" lucid
zinit load "mafredri/zsh-async"
# Load completion library for those sweet [tab] squares
zinit snippet OMZL::completion.zsh
# Up -> History search! Who knew it wasn't a built in?
zinit snippet OMZL::key-bindings.zsh
# History defaults
zinit snippet OMZL::history.zsh
# gst, gco, gc -> All the git shortcut goodness
zinit snippet OMZP::git
# Syntax highlighting for commands
zinit ice wait"3" lucid
zinit load "zdharma-continuum/fast-syntax-highlighting"
# Theme!
zinit ice pick"async.zsh" src"pure.zsh"
zinit load "sindresorhus/pure"

# ================================================================
# Sourcing stuff if they're there
# ================================================================
# source fzf if it exists
if fzf --zsh >/dev/null 2>/dev/null; then
  source <(fzf --zsh)
fi
source_if_exists ~/.cargo/env

# source things in homebrew site-functions
if brew --prefix >/dev/null 2>/dev/null; then
  BREW_PREFIX=$(brew --prefix)
  for file in "${BREW_PREFIX}"/share/zsh/site-functions/*; do
    source "${file}" >/dev/null 2>/dev/null
  done
fi

# Immediately append to the history file, not just when a term is killed
setopt incappendhistory

# Source pyenv init if it exists
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
if which pyenv > /dev/null 2>&1; then eval "$(pyenv init -)"; fi

export WORKON_HOME="$HOME/venvs"
export PROJECT_HOME="$HOME/projects"

# I can have comments at the end of my commands too :D
setopt interactivecomments

# Hey this is so dumb that I have to add this
export DISABLE_WARN_OUTSIDE_CONTAINER=1

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
export FZF_DEFAULT_COMMAND='find . -type f -not -path '*/\.git/*' -printf '%P\\n''

export GPG_TTY="$(/usr/bin/tty)"

LOCAL_SSH_AUTH_SOCK="${HOME}/.ssh/auth_sock-$(hostname -s)"

# Source local zshrc if it exists
source_if_exists ~/.zshrc.local

# SSH AGENT STUFF
if [[ -z "${TMUX}" ]]; then
    # Create an ssh auth sock if we don't already have one
    if [[ -z "${SSH_AUTH_SOCK}" ]]; then
        echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
        echo "= Instantiating new ssh-agent since one does not already exist -"
        echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
        eval "$(ssh-agent)"
        ssh-add
    fi
    unlink "${LOCAL_SSH_AUTH_SOCK}"
    ln -s "${SSH_AUTH_SOCK}" "${LOCAL_SSH_AUTH_SOCK}"
else
    # When in a tmux session default to this ssh auth sock
    export SSH_AUTH_SOCK="${LOCAL_SSH_AUTH_SOCK}"
fi

if kubectl completion zsh >/dev/null 2>/dev/null; then
  eval "$(kubectl completion zsh)"
fi


if [[ -n "$BENCHMARK" ]];then
    zprof > "$HOME/.zsh_benchmark"
fi
