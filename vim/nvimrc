" Eli's vimrc ಠ_ಠ
" TODO: Think about splitting this up into separate files
" set nocompatible
let g:mapleader = ','
let g:neovim2_venv=expand('~/venvs/neovim2/bin/python')
let g:neovim3_venv=expand('~/venvs/neovim3/bin/python')
let g:plugins_location=expand('~/.config/nvim/plugged')

augroup vimrc
    autocmd!
augroup END

if !empty(glob(g:neovim2_venv))
    let g:python_host_prog=g:neovim2_venv
endif

if !empty(glob(g:neovim3_venv))
    let g:python3_host_prog=g:neovim3_venv
endif

let s:plug_location='~/.vim/autoload/plug.vim'
if has('nvim')
    let s:plug_location='~/.local/share/nvim/site/autoload/plug.vim'
endif

if empty(glob(expand(s:plug_location)))
    silent !curl -fLo expand(s:plug_location) --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins {
    call plug#begin(g:plugins_location)
        Plug 'airblade/vim-rooter'                      " Change pwd to root for a file
        Plug 'Chiel92/vim-autoformat'                   " autoformatter
        Plug 'christoomey/vim-tmux-navigator'           " Tmux naviation so I don't get carpal tunnel
        Plug 'dense-analysis/ale'                       " Static analysis
        Plug 'ekalinin/Dockerfile.vim'                  " Dockerfile stuff
        Plug 'haya14busa/incsearch.vim'                 " Better searching
        Plug 'jiangmiao/auto-pairs'                     " Auto pair parens and brackets
        Plug 'jszakmeister/vim-togglecursor'            " Toggle cursor in insert mode
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'                         " fuzzy file finding
        Plug 'junegunn/goyo.vim'                        " 'focus' mode
        Plug 'luochen1990/rainbow'                      " Rainbow parenthesis
        Plug 'mbbill/undotree'                          " Undo tree
        Plug 'mhinz/vim-signify'                        " Diff symbols
        Plug 'mhinz/vim-startify'                       " Nice start screen
        Plug 'morhetz/gruvbox'                          " Really nice colorscheme
        Plug 'nathanaelkane/vim-indent-guides'          " Indent Guides
        Plug 'neoclide/coc.nvim', {'branch': 'release'} " Auto-completion
        Plug 'powerline/fonts'                          " Powerline fonts for airline
        Plug 'rking/ag.vim'                             " Silver searcher searching
        Plug 'ryanoasis/vim-devicons'                   " Dev-icons for nerdtree
        Plug 'schickling/vim-bufonly'                   " Close all buffers except one
        Plug 'scrooloose/nerdtree'                      " File tree viewer
        Plug 'tpope/vim-abolish'                        " Case insensitive search and replace
        Plug 'tpope/vim-commentary'                     " Comment all the things
        Plug 'tpope/vim-fugitive'                       " Git stuff (Mainly for :Gblame)
        Plug 'tpope/vim-sleuth'                         " Detect tabs / spaces
        Plug 'tpope/vim-surround'                       " Surround things with things
        Plug 'vim-airline/vim-airline'                  " Cool ass statusline
        Plug 'Xuyuanp/nerdtree-git-plugin'              " Git plugin for nerdtree
        Plug 'fatih/vim-go', {'for': 'go'}              " Go specific dev tools
        Plug 'rust-lang/rust.vim', {'for': 'rust'}      " Rust tooling
        Plug 'hashivim/vim-terraform', {'for': 'tf'}    " Terraform tooling / linting

    call plug#end()

    " vim-signify {
        set updatetime=100
    " }

    " coc {
        " GoTo code navigation.
        nmap <silent> gd <Plug>(coc-definition)
        nmap <silent> gy <Plug>(coc-type-definition)
        nmap <silent> gi <Plug>(coc-implementation)
        nmap <silent> gr <Plug>(coc-references)
        let g:ale_linters = {
        \   'typescript': ['eslint', 'tslint'],
        \}
    " }

    " vim-tmux-navigator {
        " Disable tmux navigator when zooming the Vim pane
        let g:tmux_navigator_disable_when_zoomed = 1
    " }

    " vim-bufonly {
        nnoremap <Leader>bo :Bufonly<CR>
    " }

    " python-mode {
        let g:pymode_rope_completion=0
        let g:pymode_rope_completion_bind = ''
        let g:pymode_rope_complete_on_dot = 0
        let g:pymode_lint=0
        let g:pymode_folding=0
        let g:pymode_virtualenv=0
    " }

    " incsearch.vim {
        " Set it so that we actually use the plugin
        map /  <Plug>(incsearch-forward)
        map ?  <Plug>(incsearch-backward)
        map g/ <Plug>(incsearch-stay)
        " Set it so that ugly search highlights automagically go away
        set hlsearch
        let g:incsearch#auto_nohlsearch = 1
        map n  <Plug>(incsearch-nohl-n)
        map N  <Plug>(incsearch-nohl-N)
        map *  <Plug>(incsearch-nohl-*)
        map #  <Plug>(incsearch-nohl-#)
        map g* <Plug>(incsearch-nohl-g*)
        map g# <Plug>(incsearch-nohl-g#)
    " }

    " indent-guides {
        let g:indent_guides_start_level = 2
        let g:indent_guides_guide_size = 1
        let g:indent_guides_enable_on_vim_startup = 1
    " }

    " vim-airline {
        let g:airline_theme='gruvbox'
        let g:airline_powerline_fonts = 1
        let g:airline#extensions#tabline#enabled = 1
        let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
        let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
    " }

    " NERDTree {
        map <C-e> :NERDTreeToggle<CR>
        map <Leader>e :NERDTreeFind<CR>
        map <Leader>nt :NERDTreeFind<CR>

        let g:NERDTreeShowBookmarks=1
        let g:NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '^\.ropeproject$']
        let g:NERDTreeChDirMode=0
        let g:NERDTreeQuitOnOpen=0
        let g:NERDTreeMouseMode=2
        let g:NERDTreeShowHidden=1
        let g:NERDTreeKeepTreeInNewTab=1
        let g:nerdtree_tabs_open_on_gui_startup=0
    " }

    " UndoTree {
        nnoremap <Leader>u :UndotreeToggle<CR>
        let g:undotree_SetFocusWhenToggle=1
    " }

    " Git Fugitive {
        let g:has_fugitive=1
    " }

    " rainbow {
        let g:rainbow_active = 1
    " }

    " fzf {
        " Using floating windows of Neovim to start fzf
        if has('nvim')
          function! FloatingFZF(width, height, border_highlight)
            function! s:create_float(hl, opts)
              let buf = nvim_create_buf(v:false, v:true)
              let opts = extend({'relative': 'editor', 'style': 'minimal'}, a:opts)
              let win = nvim_open_win(buf, v:true, opts)
              call setwinvar(win, '&winhighlight', 'NormalFloat:'.a:hl)
              call setwinvar(win, '&colorcolumn', '')
              return buf
            endfunction

            " Size and position
            let width = float2nr(&columns * a:width)
            let height = float2nr(&lines * a:height)
            let row = float2nr((&lines - height) / 2)
            let col = float2nr((&columns - width) / 2)

            " Border
            let top = '╭' . repeat('─', width - 2) . '╮'
            let mid = '│' . repeat(' ', width - 2) . '│'
            let bot = '╰' . repeat('─', width - 2) . '╯'
            let border = [top] + repeat([mid], height - 2) + [bot]

            " Draw frame
            let s:frame = s:create_float(a:border_highlight, {'row': row, 'col': col, 'width': width, 'height': height})
            call nvim_buf_set_lines(s:frame, 0, -1, v:true, border)

            " Draw viewport
            call s:create_float('Normal', {'row': row + 1, 'col': col + 2, 'width': width - 4, 'height': height - 2})
            autocmd BufWipeout <buffer> execute 'bwipeout' s:frame
          endfunction

          let g:fzf_layout = { 'window': 'call FloatingFZF(0.9, 0.6, "Comment")' }
        endif

        " Hide statusline
        if has('nvim') && !exists('g:fzf_layout')
          autocmd! FileType fzf
          autocmd  FileType fzf set laststatus=0 noshowmode noruler
            \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
        endif

        map <C-p> :Files<CR>
        let find_command = "find"
        " For some ungodly reason mac's version of find does not include
        " -printf, so we need to switch to gfind here
        if has('macunix')
            let find_command = "gfind"
        endif
        let $FZF_DEFAULT_COMMAND = find_command . " . -type f -not -path '*/\.git/*' -printf '%P\\n'"
        command! -bang -nargs=* Rg
          \ call fzf#vim#grep(
          \   'rg --hidden -g "!.git" --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
          \   fzf#vim#with_preview(), <bang>0)
    " }

    " coc {
        " use <tab> for trigger completion and navigate to the next complete item
        function! s:check_back_space() abort
            let col = col('.') - 1
            return !col || getline('.')[col - 1]  =~ '\s'
        endfunction

        inoremap <silent><expr> <Tab>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<Tab>" :
            \ coc#refresh()
    " }

    " vim-go {
        let g:go_metalinter_autosave = 0
    " }

    " vim-terraform {
        let g:terraform_align=1
        let g:terraform_fmt_on_save=1
    " }

" }

" General {
    " Allow a trigger for the background
    set background=dark
    function! ToggleBG()
        let s:tbg = &background
        " Inversion
        if s:tbg ==# 'dark'
            set background=light
        else
            set background=dark
        endif
    endfunction
    nnoremap <Leader>bg :call ToggleBG()<CR>

    filetype plugin indent on       " Automatically detect file types.
    syntax on                       " Syntax highlighting
    set mousehide                   " Hide the mouse cursor while typing
    set encoding=utf8
    scriptencoding utf-8

    set clipboard+=unnamed          " Enable clipboard from OSX
    set viewoptions=folds,options,cursor,unix,slash
    set virtualedit=onemore         " Allow for cursor beyond last character
    set history=1000                " Store a ton of history
    set nospell                     " Turn spellcheck off
    set hidden                      " Allow buffer switching without saving

    " Set it to the first line when editing a git commit message
    augroup gcommit
        au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
    augroup END

    " Restore cursor to file position in previous editing session
    function! ResCur()
        if line("'\"") <= line("$")
            silent! normal! g`"
            return 1
        endif
    endfunction

    augroup resCur
        autocmd!
        autocmd BufWinEnter * call ResCur()
    augroup END

    " Sets central temp file location, to prevent local default behavior.
    if isdirectory($HOME . '/.vim/.tmp') == 0
        :silent !mkdir -m 700 -p ~/.vim/.tmp > /dev/null 2>&1
    endif

    set backupdir=~/.vim/.tmp ",~/.local/tmp/vim,/var/tmp,/tmp,
    set directory=~/.vim/.tmp ",~/.local/tmp/vim,/var/tmp,/tmp,

    if exists('+undofile')
        " undofile -- This allows you to use undos after exiting and
        "             restarting. NOTE: only present in 7.3+
        "             :help undo-persistence
        if isdirectory( $HOME . '/.vim/.undo' ) == 0
            :silent !mkdir -m 700 -p ~/.vim/.undo > /dev/null 2>&1
        endif
        set undodir=~/.vim/.undo
        set undofile
    endif
" }


" UI Options {
    if has('gui_running')
        set guioptions-=r
        set guioptions-=l
        set guioptions-=R
        set guioptions-=L
    endif
    " True color support
    set termguicolors

    color gruvbox

    set splitbelow
    set splitright
    set tabpagemax=15   " Only show 15 tabs
    set showmode        " Display the current mode
    if exists('&inccommand')
        set inccommand=split " Turn on live preview substitute
    endif

    highlight clear SignColumn
    highlight clear LineNr
    " Enable transparency
    highlight Normal ctermbg=none
    highlight NonText ctermbg=none

    if has('cmdline_info')
        set ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
        set showcmd
    endif

    if has('statusline')
        set laststatus=2
        set statusline=%<%f\                    " Filename
        set statusline+=%w%h%m%r                " Options
        if g:has_fugitive == 1
            set statusline+=%{fugitive#statusline()}
        endif
        set statusline+=\ [%{&ff}/%Y]           " Filetype
        set statusline+=\ [%{getcwd()}]         " Current dir
        set statusline+=%=%-14.(%l,%cV%)\ %p%%  " Right aligned file nav info
    endif

    set backspace=indent,eol,start                  " Working backspace
    set number                                      " Line numbers are on
    set showmatch                                   " Show matching brackets/parenthesis
    set incsearch                                   " Find as you type search
    set ignorecase                                  " Case insensitive search
    set smartcase                                   " Case sensitive when uc present
    set wildmenu                                    " Show a list of completions for commands
    set wildmode=list:longest,full                  " Command <Tab> completion, list matches,then longest part, then all.
    set whichwrap=b,s,h,l,<,>,[,]                   " Backspace and cursor keys wrap too
    set scrolljump=5                                " Lines to scroll when cursor leaves screen
    set scrolloff=3                                 " Minimum lines to keep above/below cursor
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:.  " Highlight problematic whitespace
    set foldmethod=indent
    set foldlevelstart=99
    autocmd vimrc FileType python let &colorcolumn=80
    " Disable the annoying bells
    set noerrorbells visualbell t_vb=
    if has('autocmd')
        autocmd vimrc GUIEnter * set visualbell t_vb=
    endif

    if has('nvim')
        au TermOpen * setlocal nonumber norelativenumber
    endif
" }

" Formatting {
    set nowrap          " No wrapping
    set autoindent      " Indent at the same level of the prev line
    set shiftwidth=4    " Use indents of 4 spaces
    set expandtab       " Tabs are spaces
    set tabstop=4       " An indentation every four columns
    set softtabstop=4   " Let backspace delete indent
    set nojoinspaces    " Prevents inserting two spaces after punctuation on a join (J)
    function! StripTrailingWhitespace()
        let l:_s=@/
        let l:l = line('.')
        let l:c = line('.')
        %s/\s\+$//e
        let @/=l:_s
        call cursor(l:l, l:c)
    endfunction
    " Deletes trailing whitespace
    nnoremap <Leader>sw :call StripTrailingWhitespace()<CR>
    autocmd vimrc FileType c,cpp,java,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql,groovy,sh autocmd BufWritePre <buffer> :call StripTrailingWhitespace()
    " Auto put things to 2 spaces when doing haskell, puppet, ruby, yml
    autocmd vimrc FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
" }

" Key Mappings {
    " Easier moving in tabs and windows
    nnoremap <C-J> <C-W>j   " Move up
    nnoremap <C-K> <C-W>k   " Move down
    nnoremap <C-L> <C-W>l   " Move left
    nnoremap <C-H> <C-W>h   " Move right

    " Easier moving in tabs
    map <S-H> gT
    map <S-L> gt

    " Change working directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " Adjust viewports to the same size
    map <Leader>= <C-w>=

    " Easy horizontal scrolling
    map zl zL
    map zh zH

    " Easier indenting
    vmap q <gv
    vmap <TAB> >gv
" }

